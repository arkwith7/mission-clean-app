version: '3.8'

services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:14-alpine
    container_name: mission-clean-postgres
    restart: unless-stopped
    env_file:
      - env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mission-clean-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 백엔드 API 서버
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: mission-clean-backend
    restart: unless-stopped
    user: "1001:1001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - env.production
    volumes:
      - ./server/data:/app/data
      - ./server/logs:/app/logs
    networks:
      - mission-clean-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3001/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 10
      start_period: 300s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 프론트엔드 서버
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: mission-clean-frontend
    restart: unless-stopped
    env_file:
      - env.production
    networks:
      - mission-clean-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:80/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx 리버스 프록시 (HTTPS 터미네이션)
  nginx:
    image: nginx:alpine
    container_name: mission-clean-nginx
    restart: unless-stopped
    env_file:
      - env.production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - mission-clean-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Let's Encrypt SSL 인증서 관리
  certbot:
    image: certbot/certbot
    container_name: mission-clean-certbot
    env_file:
      - env.production
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - mission-clean-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

networks:
  mission-clean-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local 