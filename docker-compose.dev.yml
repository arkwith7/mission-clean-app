version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:14-alpine
    container_name: mission-clean-db-dev
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mission-clean-dev-network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: mission-clean-backend-dev
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./server:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mission-clean-dev-network

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: mission-clean-frontend-dev
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - mission-clean-dev-network

networks:
  mission-clean-dev-network:
    driver: bridge

volumes:
  postgres_data_dev:
    driver: local 